<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="7" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-01-18T11:37:34 IST" name="Default suite" finished-at="2021-01-18T11:37:34 IST" duration-ms="72">
    <groups>
    </groups>
    <test started-at="2021-01-18T11:37:34 IST" name="Default test" finished-at="2021-01-18T11:37:34 IST" duration-ms="72">
      <class name="TestCalculate">
        <test-method is-config="true" signature="init()[pri:0, instance:TestCalculate@623a8092]" started-at="2021-01-18T11:37:34 IST" name="init" finished-at="2021-01-18T11:37:34 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="ThreeNumberBothwayReturnsSum()[pri:0, instance:TestCalculate@623a8092]" started-at="2021-01-18T11:37:34 IST" name="ThreeNumberBothwayReturnsSum" finished-at="2021-01-18T11:37:34 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ThreeNumberBothwayReturnsSum -->
        <test-method signature="emptyStringReturnZero()[pri:0, instance:TestCalculate@623a8092]" started-at="2021-01-18T11:37:34 IST" name="emptyStringReturnZero" finished-at="2021-01-18T11:37:34 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- emptyStringReturnZero -->
        <test-method signature="negativeInputReturnsException()[pri:0, instance:TestCalculate@623a8092]" started-at="2021-01-18T11:37:34 IST" name="negativeInputReturnsException" finished-at="2021-01-18T11:37:34 IST" duration-ms="4" status="PASS">
          <exception class="java.lang.Exception">
            <message>
              <![CDATA[Negative inputs are is not valide]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Exception: Negative inputs are is not valide
at Calculator.findException(Calculator.java:45)
at Calculator.getSum(Calculator.java:29)
at Calculator.calculate(Calculator.java:17)
at TestCalculate.negativeInputReturnsException(TestCalculate.java:48)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Exception -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeInputReturnsException -->
        <test-method signature="numbersGreateThan1000()[pri:0, instance:TestCalculate@623a8092]" started-at="2021-01-18T11:37:34 IST" name="numbersGreateThan1000" finished-at="2021-01-18T11:37:34 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- numbersGreateThan1000 -->
        <test-method signature="sigleNumberRepilesValue()[pri:0, instance:TestCalculate@623a8092]" started-at="2021-01-18T11:37:34 IST" name="sigleNumberRepilesValue" finished-at="2021-01-18T11:37:34 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sigleNumberRepilesValue -->
        <test-method signature="twoNumbersCommaReturnsSum()[pri:0, instance:TestCalculate@623a8092]" started-at="2021-01-18T11:37:34 IST" name="twoNumbersCommaReturnsSum" finished-at="2021-01-18T11:37:34 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoNumbersCommaReturnsSum -->
        <test-method signature="twoNumbersNewlineReturnsSum()[pri:0, instance:TestCalculate@623a8092]" started-at="2021-01-18T11:37:34 IST" name="twoNumbersNewlineReturnsSum" finished-at="2021-01-18T11:37:34 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoNumbersNewlineReturnsSum -->
      </class> <!-- TestCalculate -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
